# biblioteca/core/excecoes/excecoes.py
class ValidationException(Exception):
    """Exceção base para erros de validação"""
    pass


class LoginInvalidoException(ValidationException):
    """Exceção para quando o login é inválido"""

    def __init__(self, mensagem="Login inválido"):
        self.mensagem = mensagem
        super().__init__(self.mensagem)


class SenhaInvalidaException(ValidationException):
    """Exceção para quando a senha é inválida"""

    def __init__(self, mensagem="Senha inválida"):
        self.mensagem = mensagem
        super().__init__(self.mensagem)


class PersistenciaException(Exception):
    """Exceção para erros de persistência"""

    def __init__(self, mensagem="Erro de persistência"):
        self.mensagem = mensagem
        super().__init__(self.mensagem)


# biblioteca/core/entidades/usuario.py
import re
from biblioteca.core.excecoes.excecoes import LoginInvalidoException, SenhaInvalidaException


class Usuario:
    def __init__(self, id, login, senha, nome, email, tipo="REGULAR"):
        self.id = id
        self.validarLogin(login)
        self.login = login
        self.validarSenha(senha)
        self.senha = senha
        self.nome = nome
        self.email = email
        self.tipo = tipo  # REGULAR ou BIBLIOTECARIO
        self.status = "ATIVO"  # ATIVO ou BLOQUEADO

    def validarLogin(self, login):
        """
        Valida o login:
        * máximo 12 caracteres
        * não pode ser vazio
        * não pode ter números
        """
        if not login or login.strip() == "":
            raise LoginInvalidoException("Login não pode ser vazio")

        if len(login) > 12:
            raise LoginInvalidoException("Login deve ter no máximo 12 caracteres")

        if any(char.isdigit() for char in login):
            raise LoginInvalidoException("Login não pode conter números")

    def validarSenha(self, senha):
        """
        Valida a senha seguindo as regras da política AWS IAM:
        * Mínimo de 8 caracteres
        * Máximo de 128 caracteres
        * Pelo menos 3 dos seguintes tipos de caracteres: maiúsculas, minúsculas, números e símbolos
        * Não pode ser idêntica ao nome da conta ou ao endereço de e-mail
        """
        if not senha or len(senha) < 8:
            raise SenhaInvalidaException("A senha deve ter no mínimo 8 caracteres")

        if len(senha) > 128:
            raise SenhaInvalidaException("A senha deve ter no máximo 128 caracteres")

        # Verificar complexidade da senha
        categorias = [
            any(c.isupper() for c in senha),  # Maiúsculas
            any(c.islower() for c in senha),  # Minúsculas
            any(c.isdigit() for c in senha),  # Números
            any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?/~`' for c in senha)  # Símbolos
        ]

        if sum(categorias) < 3:
            raise SenhaInvalidaException(
                "A senha deve conter pelo menos 3 dos seguintes tipos: maiúsculas, minúsculas, números e símbolos")

        # Verificar se a senha não é idêntica ao login ou email
        if hasattr(self, 'login') and senha == self.login:
            raise SenhaInvalidaException("A senha não pode ser igual ao login")

        if hasattr(self, 'email') and senha == self.email:
            raise SenhaInvalidaException("A senha não pode ser igual ao email")

    def __str__(self):
        return f"ID: {self.id} | Login: {self.login} | Nome: {self.nome} | Email: {self.email} | Tipo: {self.tipo} | Status: {self.status}"


# biblioteca/core/persistencia/interfaces.py
from abc import ABC, abstractmethod


class PersistenciaInterface(ABC):
    @abstractmethod
    def adicionar(self, objeto):
        pass

    @abstractmethod
    def buscar_por_id(self, id):
        pass

    @abstractmethod
    def listar_todos(self):
        pass

    @abstractmethod
    def atualizar(self, objeto):
        pass

    @abstractmethod
    def remover(self, id):
        pass


# biblioteca/core/persistencia/dao_factory.py
import os
from biblioteca.core.persistencia.usuario_dao_memoria import UsuarioDAOMemoria
from biblioteca.core.persistencia.usuario_dao_arquivo import UsuarioDAOArquivo


class DAOFactory:
    _tipo_persistencia = None
    _usuario_dao = None

    @classmethod
    def configurar(cls, tipo_persistencia="MEMORIA"):
        if tipo_persistencia not in ["MEMORIA", "ARQUIVO"]:
            tipo_persistencia = "MEMORIA"
        cls._tipo_persistencia = tipo_persistencia
        cls._usuario_dao = None  # Reset para forçar a criação de uma nova instância

    @classmethod
    def get_tipo_persistencia(cls):
        if cls._tipo_persistencia is None:
            cls.configurar()
        return cls._tipo_persistencia

    @classmethod
    def get_usuario_dao(cls):
        if cls._usuario_dao is None:
            if cls.get_tipo_persistencia() == "MEMORIA":
                cls._usuario_dao = UsuarioDAOMemoria()
            else:
                # Diretório para salvar os arquivos binários
                diretorio = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'dados')
                if not os.path.exists(diretorio):
                    os.makedirs(diretorio)

                arquivo_path = os.path.join(diretorio, 'usuarios.bin')
                cls._usuario_dao = UsuarioDAOArquivo(arquivo_path)

        return cls._usuario_dao


# biblioteca/core/persistencia/usuario_dao_memoria.py
from biblioteca.core.persistencia.interfaces import PersistenciaInterface
from biblioteca.core.excecoes.excecoes import PersistenciaException


class UsuarioDAOMemoria(PersistenciaInterface):
    def __init__(self):
        # Simula armazenamento em memória RAM
        self.usuarios = {}
        self.proximo_id = 1

    def adicionar(self, usuario):
        try:
            if usuario.id == 0:  # Caso especial para o admin inicial
                self.usuarios[0] = usuario
                return usuario

            usuario.id = self.proximo_id
            self.usuarios[self.proximo_id] = usuario
            self.proximo_id += 1
            return usuario
        except Exception as e:
            raise PersistenciaException(f"Erro ao adicionar usuário: {str(e)}")

    def buscar_por_id(self, id):
        try:
            return self.usuarios.get(id)
        except Exception as e:
            raise PersistenciaException(f"Erro ao buscar usuário por ID: {str(e)}")

    def buscar_por_login(self, login):
        try:
            for usuario in self.usuarios.values():
                if usuario.login == login:
                    return usuario
            return None
        except Exception as e:
            raise PersistenciaException(f"Erro ao buscar usuário por login: {str(e)}")

    def listar_todos(self):
        try:
            return list(self.usuarios.values())
        except Exception as e:
            raise PersistenciaException(f"Erro ao listar usuários: {str(e)}")

    def atualizar(self, usuario):
        try:
            if usuario.id in self.usuarios:
                self.usuarios[usuario.id] = usuario
                return True
            return False
        except Exception as e:
            raise PersistenciaException(f"Erro ao atualizar usuário: {str(e)}")

    def remover(self, id):
        try:
            if id in self.usuarios:
                del self.usuarios[id]
                return True
            return False
        except Exception as e:
            raise PersistenciaException(f"Erro ao remover usuário: {str(e)}")


# biblioteca/core/persistencia/usuario_dao_arquivo.py
import os
import pickle
from biblioteca.core.persistencia.interfaces import PersistenciaInterface
from biblioteca.core.excecoes.excecoes import PersistenciaException


class UsuarioDAOArquivo(PersistenciaInterface):
    def __init__(self, arquivo_path):
        self.arquivo_path = arquivo_path
        self.usuarios = {}
        self.proximo_id = 1

        # Tentar carregar usuários existentes
        try:
            self.carregar_arquivo()
        except (FileNotFoundError, EOFError):
            # Arquivo não existe ou está vazio, iniciar com uma nova coleção
            self.usuarios = {}
            self.proximo_id = 1
        except Exception as e:
            raise PersistenciaException(f"Erro ao inicializar DAO de arquivo: {str(e)}")

    def adicionar(self, usuario):
        try:
            if usuario.id == 0:  # Caso especial para o admin inicial
                self.usuarios[0] = usuario
                self.salvar_arquivo()
                return usuario

            usuario.id = self.proximo_id
            self.usuarios[self.proximo_id] = usuario
            self.proximo_id += 1

            self.salvar_arquivo()
            return usuario
        except Exception as e:
            raise PersistenciaException(f"Erro ao adicionar usuário no arquivo: {str(e)}")

    def buscar_por_id(self, id):
        try:
            return self.usuarios.get(id)
        except Exception as e:
            raise PersistenciaException(f"Erro ao buscar usuário por ID no arquivo: {str(e)}")

    def buscar_por_login(self, login):
        try:
            for usuario in self.usuarios.values():
                if usuario.login == login:
                    return usuario
            return None
        except Exception as e:
            raise PersistenciaException(f"Erro ao buscar usuário por login no arquivo: {str(e)}")

    def listar_todos(self):
        try:
            return list(self.usuarios.values())
        except Exception as e:
            raise PersistenciaException(f"Erro ao listar usuários do arquivo: {str(e)}")

    def atualizar(self, usuario):
        try:
            if usuario.id in self.usuarios:
                self.usuarios[usuario.id] = usuario
                self.salvar_arquivo()
                return True
            return False
        except Exception as e:
            raise PersistenciaException(f"Erro ao atualizar usuário no arquivo: {str(e)}")

    def remover(self, id):
        try:
            if id in self.usuarios:
                del self.usuarios[id]
                self.salvar_arquivo()
                return True
            return False
        except Exception as e:
            raise PersistenciaException(f"Erro ao remover usuário do arquivo: {str(e)}")

    def salvar_arquivo(self):
        try:
            # Garantir que o diretório existe
            os.makedirs(os.path.dirname(self.arquivo_path), exist_ok=True)

            # Salvar os dados em um arquivo binário
            with open(self.arquivo_path, 'wb') as arquivo:
                pickle.dump((self.usuarios, self.proximo_id), arquivo)
        except Exception as e:
            raise PersistenciaException(f"Erro ao salvar arquivo: {str(e)}")

    def carregar_arquivo(self):
        try:
            # Carregar os dados do arquivo binário
            with open(self.arquivo_path, 'rb') as arquivo:
                self.usuarios, self.proximo_id = pickle.load(arquivo)
        except (FileNotFoundError, EOFError):
            # Se o arquivo não existir ou estiver vazio, iniciar com uma coleção vazia
            self.usuarios = {}
            self.proximo_id = 1
        except Exception as e:
            raise PersistenciaException(f"Erro ao carregar arquivo: {str(e)}")


#  biblioteca/servicos/usuario_service.py
from biblioteca.core.entidades.usuario import Usuario
from biblioteca.core.persistencia.dao_factory import DAOFactory
from biblioteca.core.excecoes.excecoes import ValidationException, LoginInvalidoException, SenhaInvalidaException, \
    PersistenciaException


class UsuarioService:
    def __init__(self):
        self.usuario_dao = DAOFactory.get_usuario_dao()

    def adicionar_usuario(self, login, senha, nome, email, tipo="REGULAR"):
        try:
            # Verificar se já existe um usuário com o mesmo login
            if self.usuario_dao.buscar_por_login(login):
                raise ValidationException("Já existe um usuário com este login")

            # Criar novo usuário (a validação é feita no construtor da classe Usuario)
            usuario = Usuario(0, login, senha, nome, email, tipo)
            return self.usuario_dao.adicionar(usuario)
        except (ValidationException, PersistenciaException) as e:
            # Repassar exceções de validação e persistência
            raise e
        except Exception as e:
            # Capturar outras exceções não tratadas
            raise ValidationException(f"Erro ao adicionar usuário: {str(e)}")

    def bloquear_usuario(self, id):
        try:
            usuario = self.usuario_dao.buscar_por_id(id)
            if not usuario:
                raise ValidationException("Usuário não encontrado")

            usuario.status = "BLOQUEADO"
            return self.usuario_dao.atualizar(usuario)
        except ValidationException as e:
            raise e
        except Exception as e:
            raise ValidationException(f"Erro ao bloquear usuário: {str(e)}")

    def desbloquear_usuario(self, id):
        try:
            usuario = self.usuario_dao.buscar_por_id(id)
            if not usuario:
                raise ValidationException("Usuário não encontrado")

            usuario.status = "ATIVO"
            return self.usuario_dao.atualizar(usuario)
        except ValidationException as e:
            raise e
        except Exception as e:
            raise ValidationException(f"Erro ao desbloquear usuário: {str(e)}")

    def listar_todos_usuarios(self):
        try:
            return self.usuario_dao.listar_todos()
        except Exception as e:
            raise ValidationException(f"Erro ao listar usuários: {str(e)}")

    def autenticar(self, login, senha):
        try:
            usuario = self.usuario_dao.buscar_por_login(login)
            if usuario and usuario.senha == senha:
                if usuario.status == "BLOQUEADO":
                    raise ValidationException("Usuário bloqueado")
                return usuario
            return None
        except ValidationException as e:
            raise e
        except Exception as e:
            raise ValidationException(f"Erro ao autenticar usuário: {str(e)}")


# biblioteca/interface/tela_usuario.py
from biblioteca.core.excecoes.excecoes import ValidationException, LoginInvalidoException, SenhaInvalidaException, \
    PersistenciaException


class TelaUsuario:
    def __init__(self, usuario_service):
        self.usuario_service = usuario_service

    def exibir_menu(self):
        print("\n=== GERENCIAMENTO DE USUÁRIOS ===")
        print("1. Adicionar novo usuário")
        print("2. Bloquear usuário")
        print("3. Desbloquear usuário")
        print("4. Listar todos os usuários")
        print("0. Voltar")

        opcao = input("Escolha uma opção: ")
        return opcao

    def adicionar_usuario(self):
        print("\n=== ADICIONAR NOVO USUÁRIO ===")
        nome = input("Nome: ")
        login = input("Login (máx 12 caracteres, sem números): ")
        email = input("Email: ")

        print("\nSenha deve seguir as regras da política AWS IAM:")
        print("- Mínimo de 8 caracteres")
        print("- Máximo de 128 caracteres")
        print("- Pelo menos 3 dos seguintes tipos de caracteres: maiúsculas, minúsculas, números e símbolos")
        print("- Não pode ser idêntica ao login ou ao email")
        senha = input("Senha: ")

        tipo = input("Tipo (REGULAR ou BIBLIOTECARIO): ").upper()

        if tipo not in ["REGULAR", "BIBLIOTECARIO"]:
            tipo = "REGULAR"

        try:
            usuario = self.usuario_service.adicionar_usuario(login, senha, nome, email, tipo)
            print(f"\nUsuário adicionado com sucesso! ID: {usuario.id}")
        except (LoginInvalidoException, SenhaInvalidaException, ValidationException, PersistenciaException) as e:
            self.tratar_excecao(e)

    def bloquear_usuario(self):
        print("\n=== BLOQUEAR USUÁRIO ===")
        try:
            id = int(input("ID do usuário: "))
            self.usuario_service.bloquear_usuario(id)
            print("\nUsuário bloqueado com sucesso!")
        except ValueError:
            print("\nErro: ID deve ser um número inteiro")
        except ValidationException as e:
            self.tratar_excecao(e)

    def desbloquear_usuario(self):
        print("\n=== DESBLOQUEAR USUÁRIO ===")
        try:
            id = int(input("ID do usuário: "))
            self.usuario_service.desbloquear_usuario(id)
            print("\nUsuário desbloqueado com sucesso!")
        except ValueError:
            print("\nErro: ID deve ser um número inteiro")
        except ValidationException as e:
            self.tratar_excecao(e)

    def listar_usuarios(self):
        print("\n=== LISTA DE USUÁRIOS ===")
        try:
            usuarios = self.usuario_service.listar_todos_usuarios()

            if not usuarios:
                print("Nenhum usuário cadastrado.")
                return

            for usuario in usuarios:
                print(usuario)
        except ValidationException as e:
            self.tratar_excecao(e)

    def tratar_excecao(self, e):
        if isinstance(e, LoginInvalidoException):
            print(f"\nErro de validação do login: {e}")
        elif isinstance(e, SenhaInvalidaException):
            print(f"\nErro de validação da senha: {e}")
        elif isinstance(e, PersistenciaException):
            print(f"\nErro de persistência: {e}")
        elif isinstance(e, ValidationException):
            print(f"\nErro de validação: {e}")
        else:
            print(f"\nErro: {e}")


# biblioteca/interface/menus.py
from biblioteca.interface.tela_usuario import TelaUsuario
from biblioteca.servicos.usuario_service import UsuarioService
from biblioteca.core.persistencia.dao_factory import DAOFactory


class MenuPrincipal:
    def __init__(self):
        self.configurar_persistencia()
        self.usuario_service = UsuarioService()
        self.tela_usuario = TelaUsuario(self.usuario_service)

    def configurar_persistencia(self):
        print("\n=== CONFIGURAÇÃO DO SISTEMA ===")
        print("Escolha o mecanismo de persistência:")
        print("1. Memória RAM (volátil)")
        print("2. Arquivo binário (persistente)")

        while True:
            opcao = input("Opção: ")

            if opcao == "1":
                DAOFactory.configurar("MEMORIA")
                print("Sistema configurado para persistência em memória RAM.")
                break
            elif opcao == "2":
                DAOFactory.configurar("ARQUIVO")
                print("Sistema configurado para persistência em arquivo binário.")
                break
            else:
                print("Opção inválida! Escolha 1 ou 2.")

    def exibir_menu(self):
        while True:
            print("\n=== SISTEMA DE BIBLIOTECA ===")
            print("1. Gerenciar Usuários")
            print("2. Gerenciar Livros")
            print("3. Gerenciar Empréstimos")
            print("0. Sair")

            opcao = input("Escolha uma opção: ")

            if opcao == "1":
                self.menu_usuarios()
            elif opcao == "2":
                print("Funcionalidade não implementada")
            elif opcao == "3":
                print("Funcionalidade não implementada")
            elif opcao == "0":
                print("Saindo do sistema...")
                break
            else:
                print("Opção inválida!")

    def menu_usuarios(self):
        while True:
            opcao = self.tela_usuario.exibir_menu()

            if opcao == "1":
                self.tela_usuario.adicionar_usuario()
            elif opcao == "2":
                self.tela_usuario.bloquear_usuario()
            elif opcao == "3":
                self.tela_usuario.desbloquear_usuario()
            elif opcao == "4":
                self.tela_usuario.listar_usuarios()
            elif opcao == "0":
                break
            else:
                print("Opção inválida!")


# biblioteca/main.py
from biblioteca.interface.menus import MenuPrincipal
from biblioteca.core.entidades.usuario import Usuario
from biblioteca.core.persistencia.dao_factory import DAOFactory


def inicializar_sistema():
    # Adicionar um usuário bibliotecário padrão
    try:
        usuario_dao = DAOFactory.get_usuario_dao()
        admin = Usuario(0, "admin", "Admin@123", "Administrador", "admin@biblioteca.com", "BIBLIOTECARIO")
        usuario_dao.adicionar(admin)
    except Exception as e:
        print(f"Aviso: {e}")


def main():
    inicializar_sistema()
    menu = MenuPrincipal()
    menu.exibir_menu()


if __name__ == "__main__":
    main()